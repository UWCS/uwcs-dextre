# Generated by Django 3.0.8 on 2020-07-12 15:23

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtail.images.blocks


class Migration(migrations.Migration):

    replaces = [
        ("events", "0001_initial"),
        ("events", "0002_auto_20160917_1617"),
        ("events", "0003_auto_20160917_1627"),
        ("events", "0004_auto_20160917_2055"),
        ("events", "0005_auto_20160917_2213"),
        ("events", "0006_auto_20160918_1312"),
        ("events", "0007_auto_20160918_1314"),
        ("events", "0008_auto_20160919_1054"),
        ("events", "0009_auto_20160919_1426"),
        ("events", "0010_auto_20160919_1643"),
        ("events", "0011_auto_20160920_1945"),
        ("events", "0012_auto_20160921_1721"),
        ("events", "0013_auto_20160921_1739"),
        ("events", "0014_auto_20160921_1759"),
        ("events", "0015_auto_20160921_1844"),
        ("events", "0016_auto_20160922_1928"),
        ("events", "0017_auto_20160922_2000"),
        ("events", "0018_auto_20160922_2059"),
        ("events", "0019_auto_20160928_2033"),
        ("events", "0020_auto_20161008_1236"),
        ("events", "0021_auto_20161008_1706"),
        ("events", "0022_auto_20180319_1129"),
        ("events", "0023_auto_20180504_1403"),
    ]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("wagtailcore", "0029_unicode_slugfield_dj19"),
    ]

    operations = [
        migrations.CreateModel(
            name="EventType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                (
                    "target",
                    models.CharField(
                        choices=[
                            ("ACA", "Academic"),
                            ("GAM", "Gaming"),
                            ("SCL", "Social"),
                            ("SCT", "Society"),
                        ],
                        max_length=3,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="EventPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                (
                    "body",
                    wagtail.core.fields.StreamField(
                        [
                            (
                                "h2",
                                wagtail.core.blocks.CharBlock(
                                    classname="title", icon="title"
                                ),
                            ),
                            (
                                "h3",
                                wagtail.core.blocks.CharBlock(
                                    classname="title", icon="title"
                                ),
                            ),
                            (
                                "h4",
                                wagtail.core.blocks.CharBlock(
                                    classname="title", icon="title"
                                ),
                            ),
                            (
                                "paragraph",
                                wagtail.core.blocks.RichTextBlock(icon="pilcrow"),
                            ),
                            ("image", wagtail.images.blocks.ImageChooserBlock()),
                            (
                                "pullquote",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "quote",
                                            wagtail.core.blocks.TextBlock(
                                                "quote title"
                                            ),
                                        ),
                                        (
                                            "attribution",
                                            wagtail.core.blocks.CharBlock(),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "document",
                                wagtail.documents.blocks.DocumentChooserBlock(
                                    icon="doc-full-inverse"
                                ),
                            ),
                            (
                                "code",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "language",
                                            wagtail.core.blocks.ChoiceBlock(
                                                choices=[
                                                    ("bash", "Bash/Shell"),
                                                    ("c", "C"),
                                                    ("cmake", "CMake"),
                                                    ("cpp", "C++"),
                                                    ("csharp", "C#"),
                                                    ("css", "CSS"),
                                                    ("go", "Go"),
                                                    ("haskell", "Haskell"),
                                                    ("haxe", "Haxe"),
                                                    ("html", "HTML"),
                                                    ("java", "Java"),
                                                    ("js", "JavaScript"),
                                                    ("json", "JSON"),
                                                    ("kotlin", "Kotlin"),
                                                    ("lua", "Lua"),
                                                    ("make", "Makefile"),
                                                    ("perl", "Perl"),
                                                    ("perl6", "Perl 6"),
                                                    ("php", "PHP"),
                                                    ("python", "Python"),
                                                    ("python3", "Python 3"),
                                                    ("ruby", "Ruby"),
                                                    ("sql", "SQL"),
                                                    ("swift", "Swift"),
                                                    ("xml", "XML"),
                                                ]
                                            ),
                                        ),
                                        ("code", wagtail.core.blocks.TextBlock()),
                                    ]
                                ),
                            ),
                        ]
                    ),
                ),
                ("description", models.TextField()),
                (
                    "location",
                    models.CharField(
                        default="Department of Computer Science", max_length=50
                    ),
                ),
                ("start", models.DateTimeField(default=django.utils.timezone.now)),
                ("finish", models.DateTimeField(default=django.utils.timezone.now)),
                ("cancelled", models.BooleanField()),
                (
                    "facebook_link",
                    models.URLField(
                        blank=True,
                        default="",
                        help_text="A link to the associated Facebook event if one exists",
                        verbose_name="Facebook event",
                    ),
                ),
                (
                    "signup_limit",
                    models.IntegerField(
                        default=-1,
                        help_text="Enter 0 for unlimited signups or -1 for no signups",
                        verbose_name="Signup limit",
                    ),
                ),
                (
                    "signup_open",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "signup_close",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "signup_freshers_open",
                    models.DateTimeField(
                        blank=True,
                        help_text="Set a date for when freshers may sign up to the event, leave blank if they are to sign up at the                   same time as everyone else",
                        null=True,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="events.EventType",
                    ),
                ),
                (
                    "has_seating",
                    models.BooleanField(
                        default=False,
                        help_text="Tick this if the event needs a seating plan",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="EventsIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="EventSignup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "signup_created",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("comment", models.CharField(blank=True, max_length=1024)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.EventPage",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["signup_created"],
                "unique_together": {("event", "member")},
            },
        ),
        migrations.CreateModel(
            name="EventsArchivePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="SeatingRevision",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("number", models.IntegerField()),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.EventPage",
                    ),
                ),
            ],
            options={
                "unique_together": {("event", "number")},
            },
        ),
        migrations.CreateModel(
            name="SeatingRoom",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "tables_raw",
                    models.TextField(
                        help_text="This field will contain a literal array of integers in JSON list notation ([2, 3, 4, 5]). Each position corresponds to a table, and the value is the total seats on that table. For example: [20, 20, 20, 10] would be the standard LIB2 set up."
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Seating",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reserved", models.BooleanField(default=False)),
                ("table", models.IntegerField()),
                ("seat", models.IntegerField()),
                (
                    "revision",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="events.SeatingRevision",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="eventpage",
            name="seating_location",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="events.SeatingRoom",
            ),
        ),
    ]
